local L0_0
L0_0 = module
L0_0("xiaoqiang.module.XQIPConflict", package.seeall)
L0_0 = require
L0_0 = L0_0("bit")
function _gen_new_ip(A0_1)
  local L1_2, L2_3
  if A0_1 then
    L2_3 = A0_1
    L1_2 = A0_1.gsub
    L1_2 = L1_2(L2_3, ".%d+.%d+$", "")
    L2_3 = tonumber
    L2_3 = L2_3(A0_1:match(".(%d+).%d+$"))
    return L1_2 .. "." .. tostring(_UPVALUE0_.bxor(L2_3, 3)) .. ".1"
  end
  L1_2 = ""
  return L1_2
end
function ip_conflict_detection()
  local L0_4, L1_5, L2_6, L3_7, L4_8, L5_9, L6_10
  L0_4 = require
  L1_5 = "xiaoqiang.util.XQLanWanUtil"
  L0_4 = L0_4(L1_5)
  L1_5 = require
  L2_6 = "luci.model.uci"
  L1_5 = L1_5(L2_6)
  L1_5 = L1_5.cursor
  L1_5 = L1_5()
  L3_7 = L1_5
  L2_6 = L1_5.get
  L4_8 = "network"
  L5_9 = "wan"
  L6_10 = "proto"
  L2_6 = L2_6(L3_7, L4_8, L5_9, L6_10)
  L4_8 = L1_5
  L3_7 = L1_5.get
  L5_9 = "network"
  L6_10 = "lan"
  L3_7 = L3_7(L4_8, L5_9, L6_10, "ipaddr")
  L4_8 = _UPVALUE0_
  L4_8 = L4_8.getNetModeType
  L4_8 = L4_8()
  if L2_6 ~= "dhcp" and L2_6 ~= "static" or L4_8 ~= 0 then
    L5_9 = false
    return L5_9
  end
  L5_9 = L0_4.ubusWanStatus
  L5_9 = L5_9()
  if L5_9 then
    L6_10 = L5_9.ipv4
    if L6_10 then
      L6_10 = L5_9.ipv4
      L6_10 = L6_10.address
      if L6_10:gsub(".%d+$", "") == L3_7:gsub(".%d+$", "") then
        return _gen_new_ip(L6_10)
      end
    end
  end
  L6_10 = false
  return L6_10
end
function ip_conflict_resolution()
  local L0_11, L1_12, L2_13, L3_14, L4_15, L5_16, L6_17
  L0_11 = require
  L1_12 = "xiaoqiang.module.XQMessageBox"
  L0_11 = L0_11(L1_12)
  L1_12 = require
  L2_13 = "luci.model.uci"
  L1_12 = L1_12(L2_13)
  L1_12 = L1_12.cursor
  L1_12 = L1_12()
  L2_13 = require
  L3_14 = "xiaoqiang.XQEvent"
  L2_13 = L2_13(L3_14)
  L3_14 = require
  L4_15 = "xiaoqiang.util.XQLanWanUtil"
  L3_14 = L3_14(L4_15)
  L4_15 = L3_14.ubusWanStatus
  L4_15 = L4_15()
  if L4_15 then
    L5_16 = L4_15.ipv4
    if L5_16 then
      L5_16 = L4_15.ipv4
      L5_16 = L5_16.address
      if L5_16 then
        L6_17 = L0_11.removeMessage
        L6_17(4)
        L6_17 = _gen_new_ip
        L6_17 = L6_17(L5_16)
        L1_12:set("network", "lan", "ipaddr", L6_17)
        L1_12:commit("network")
        L2_13.lanIPChange(L6_17)
      end
    end
  end
end
function restart_services(A0_18)
  local L1_19
  L1_19 = [[
        sleep 4;
        /etc/init.d/network restart 2>/dev/null;
        /etc/init.d/dnsmasq stop 2>/dev/null;
        /etc/init.d/dnsmasq restart 2>/dev/null;
        /usr/sbin/dhcp_apclient.sh restart lan 2>/dev/null;
        /etc/init.d/trafficd restart 2>/dev/null;
        /etc/init.d/minet restart 2>/dev/null;
        /usr/sbin/shareUpdate -b 2>/dev/null;
	[ -f "/usr/sbin/release_lan_clients.sh" ] && /usr/sbin/release_lan_clients.sh &
    ]]
  if A0_18 then
    _UPVALUE0_.forkExec(L1_19)
  else
    os.execute(L1_19)
  end
end
