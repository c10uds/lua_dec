local L0_0
L0_0 = module
L0_0("aeslua", package.seeall)
L0_0 = {}
aeslua = {}
;({}).AES128 = 16
;({}).AES192 = 24
;({}).AES256 = 32
;({}).ECBMODE = 1
;({}).CBCMODE = 2
;({}).OFBMODE = 3
;({}).CFBMODE = 4
function L0_0.pwToKey(A0_1, A1_2)
  local L2_3, L3_4
  L2_3 = A1_2
  L3_4 = _UPVALUE0_
  L3_4 = L3_4.AES192
  if A1_2 == L3_4 then
    L2_3 = 32
  end
  L3_4 = #A0_1
  if L2_3 > L3_4 then
    L3_4 = ""
    for _FORV_7_ = 1, L2_3 - #A0_1 do
      L3_4 = L3_4 .. string.char(0)
    end
    A0_1 = A0_1 .. L3_4
  else
    L3_4 = string
    L3_4 = L3_4.sub
    L3_4 = L3_4(A0_1, 1, L2_3)
    A0_1 = L3_4
  end
  L3_4 = {
    string.byte(A0_1, 1, #A0_1)
  }
  A0_1 = _UPVALUE1_.encryptString(L3_4, A0_1, _UPVALUE1_.encryptCBC)
  A0_1 = string.sub(A0_1, 1, A1_2)
  return {
    string.byte(A0_1, 1, #A0_1)
  }
end
;({}).encrypt = function(A0_5, A1_6, A2_7, A3_8)
  local L4_9, L5_10, L6_11, L7_12
  L4_9 = assert
  L5_10 = A0_5 ~= nil
  L6_11 = "Empty password."
  L4_9(L5_10, L6_11)
  L4_9 = assert
  L5_10 = A0_5 ~= nil
  L6_11 = "Empty data."
  L4_9(L5_10, L6_11)
  L4_9 = A3_8 or L4_9.CBCMODE
  L5_10 = A2_7 or L5_10.AES128
  L6_11 = _UPVALUE1_
  L6_11 = L6_11.pwToKey
  L7_12 = A0_5
  L6_11 = L6_11(L7_12, L5_10)
  L7_12 = _UPVALUE2_
  L7_12 = L7_12.padByteString
  L7_12 = L7_12(A1_6)
  if L4_9 == _UPVALUE0_.ECBMODE then
    return _UPVALUE3_.encryptString(L6_11, L7_12, _UPVALUE3_.encryptECB)
  elseif L4_9 == _UPVALUE0_.CBCMODE then
    return _UPVALUE3_.encryptString(L6_11, L7_12, _UPVALUE3_.encryptCBC)
  elseif L4_9 == _UPVALUE0_.OFBMODE then
    return _UPVALUE3_.encryptString(L6_11, L7_12, _UPVALUE3_.encryptOFB)
  elseif L4_9 == _UPVALUE0_.CFBMODE then
    return _UPVALUE3_.encryptString(L6_11, L7_12, _UPVALUE3_.encryptCFB)
  else
    return nil
  end
end
;({}).decrypt = function(A0_13, A1_14, A2_15, A3_16)
  local L4_17, L5_18, L6_19, L7_20
  L4_17 = A3_16 or L4_17.CBCMODE
  L5_18 = A2_15 or L5_18.AES128
  L6_19 = _UPVALUE1_
  L6_19 = L6_19.pwToKey
  L7_20 = A0_13
  L6_19 = L6_19(L7_20, L5_18)
  L7_20 = nil
  if L4_17 == _UPVALUE0_.ECBMODE then
    L7_20 = _UPVALUE2_.decryptString(L6_19, A1_14, _UPVALUE2_.decryptECB)
  elseif L4_17 == _UPVALUE0_.CBCMODE then
    L7_20 = _UPVALUE2_.decryptString(L6_19, A1_14, _UPVALUE2_.decryptCBC)
  elseif L4_17 == _UPVALUE0_.OFBMODE then
    L7_20 = _UPVALUE2_.decryptString(L6_19, A1_14, _UPVALUE2_.decryptOFB)
  elseif L4_17 == _UPVALUE0_.CFBMODE then
    L7_20 = _UPVALUE2_.decryptString(L6_19, A1_14, _UPVALUE2_.decryptCFB)
  end
  result = _UPVALUE3_.unpadByteString(L7_20)
  if result == nil then
    return nil
  end
  return result
end
return aeslua
