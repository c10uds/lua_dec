local L0_0
L0_0 = require
L0_0 = L0_0("math")
module("json")
function encode(A0_1)
  local L1_2, L2_3, L3_4, L4_5, L5_6, L6_7, L7_8, L8_9, L9_10
  if A0_1 == nil then
    L1_2 = "null"
    return L1_2
  end
  L1_2 = _UPVALUE0_
  L1_2 = L1_2.type
  L2_3 = A0_1
  L1_2 = L1_2(L2_3)
  if L1_2 == "string" then
    L2_3 = "\""
    L3_4 = _UPVALUE1_
    L4_5 = A0_1
    L3_4 = L3_4(L4_5)
    L4_5 = "\""
    L2_3 = L2_3 .. L3_4 .. L4_5
    return L2_3
  end
  if L1_2 == "number" or L1_2 == "boolean" then
    L2_3 = _UPVALUE0_
    L2_3 = L2_3.tostring
    L3_4 = A0_1
    return L2_3(L3_4)
  end
  if L1_2 == "table" then
    L2_3 = {}
    L3_4 = _UPVALUE2_
    L4_5 = A0_1
    L4_5 = L3_4(L4_5)
    if L3_4 then
      for L8_9 = 1, L4_5 do
        L9_10 = _UPVALUE3_
        L9_10 = L9_10.insert
        L9_10(L2_3, encode(A0_1[L8_9]))
      end
    else
      for L8_9, L9_10 in L5_6(L6_7) do
        if _UPVALUE4_(L8_9) and _UPVALUE4_(L9_10) then
          _UPVALUE3_.insert(L2_3, "\"" .. _UPVALUE1_(L8_9) .. "\":" .. encode(L9_10))
        end
      end
    end
    if L3_4 then
      L8_9 = ","
      return L5_6
    else
      L8_9 = ","
      return L5_6
    end
  end
  if L1_2 == "function" then
    L2_3 = null
    if A0_1 == L2_3 then
      L2_3 = "null"
      return L2_3
    end
  end
  L2_3 = _UPVALUE0_
  L2_3 = L2_3.assert
  L3_4 = false
  L4_5 = "encode attempt to encode unsupported type "
  L8_9 = A0_1
  L4_5 = L4_5 .. L5_6 .. L6_7 .. L7_8
  L2_3(L3_4, L4_5)
end
function decode(A0_11, A1_12)
  local L2_13
  if not A1_12 or not A1_12 then
    A1_12 = 1
  end
  L2_13 = _UPVALUE0_
  L2_13 = L2_13(A0_11, A1_12)
  A1_12 = L2_13
  L2_13 = _UPVALUE1_
  L2_13 = L2_13.assert
  L2_13(A1_12 <= _UPVALUE2_.len(A0_11), "Unterminated JSON encoded object found at position in [" .. A0_11 .. "]")
  L2_13 = _UPVALUE2_
  L2_13 = L2_13.sub
  L2_13 = L2_13(A0_11, A1_12, A1_12)
  if L2_13 == "{" then
    return _UPVALUE3_(A0_11, A1_12)
  end
  if L2_13 == "[" then
    return _UPVALUE4_(A0_11, A1_12)
  end
  if _UPVALUE2_.find("+-0123456789.e", L2_13, 1, true) then
    return _UPVALUE5_(A0_11, A1_12)
  end
  if L2_13 == "\"" or L2_13 == "'" then
    return _UPVALUE6_(A0_11, A1_12)
  end
  if _UPVALUE2_.sub(A0_11, A1_12, A1_12 + 1) == "/*" then
    return decode(A0_11, _UPVALUE7_(A0_11, A1_12))
  end
  return _UPVALUE8_(A0_11, A1_12)
end
function null()
  local L0_14, L1_15
  L0_14 = null
  return L0_14
end
