local L0_0
L0_0 = require
L0_0 = L0_0("socket")
;({
  _VERSION = "0.6",
  _COPYRIGHT = "LuaSec 0.6 - Copyright (C) 2009-2016 PUC-Rio",
  PORT = 443
}).request = function(A0_1, A1_2)
  local L2_3, L3_4, L4_5, L5_6, L6_7, L7_8
  L2_3 = {}
  L3_4 = type
  L4_5 = A0_1
  L3_4 = L3_4(L4_5)
  L3_4 = L3_4 == "string"
  if L3_4 then
    L4_5 = _UPVALUE0_
    L5_6 = A0_1
    L6_7 = A1_2
    L7_8 = L2_3
    L4_5 = L4_5(L5_6, L6_7, L7_8)
    A0_1 = L4_5
  else
    L4_5 = _UPVALUE1_
    L5_6 = A0_1.url
    L4_5 = L4_5(L5_6)
    A0_1.url = L4_5
  end
  L4_5 = _UPVALUE2_
  L4_5 = L4_5.PROXY
  if not L4_5 then
    L4_5 = A0_1.proxy
  else
    if L4_5 then
      L4_5 = nil
      L5_6 = "proxy not supported"
      return L4_5, L5_6
  end
  else
    L4_5 = A0_1.redirect
    if L4_5 then
      L4_5 = nil
      L5_6 = "redirect not supported"
      return L4_5, L5_6
    else
      L4_5 = A0_1.create
      if L4_5 then
        L4_5 = nil
        L5_6 = "create function not permitted"
        return L4_5, L5_6
      end
    end
  end
  L4_5 = _UPVALUE3_
  L5_6 = A0_1
  L4_5 = L4_5(L5_6)
  A0_1.create = L4_5
  L4_5 = _UPVALUE2_
  L4_5 = L4_5.request
  L5_6 = A0_1
  L7_8 = L4_5(L5_6)
  if L4_5 and L3_4 then
    return table.concat(L2_3), L5_6, L6_7, L7_8
  end
  return L4_5, L5_6, L6_7, L7_8
end
return {
  _VERSION = "0.6",
  _COPYRIGHT = "LuaSec 0.6 - Copyright (C) 2009-2016 PUC-Rio",
  PORT = 443
}
