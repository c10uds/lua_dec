local L0_0
L0_0 = require
L0_0 = L0_0("string")
module("luci.ltn12")
filter = {}
source = {}
sink = {}
pump = {}
BLOCKSIZE = 2048
_VERSION = "LTN12 1.0.1"
function filter.cycle(A0_1, A1_2, A2_3)
  _UPVALUE0_.assert(A0_1)
  return function(A0_4)
    local L1_5
    L1_5, _UPVALUE0_ = _UPVALUE1_(_UPVALUE0_, A0_4, _UPVALUE2_)
    return L1_5
  end
end
function filter.chain(...)
  return function(A0_7)
    _UPVALUE0_ = A0_7 and _UPVALUE0_
    while true do
      if _UPVALUE1_ == _UPVALUE2_ then
        A0_7 = _UPVALUE3_[_UPVALUE1_](A0_7)
        if A0_7 == "" or _UPVALUE2_ == _UPVALUE4_ then
          return A0_7
        elseif A0_7 then
          _UPVALUE1_ = _UPVALUE1_ + 1
        else
          _UPVALUE2_ = _UPVALUE2_ + 1
          _UPVALUE1_ = _UPVALUE2_
        end
      else
        A0_7 = _UPVALUE3_[_UPVALUE1_](A0_7 or "")
        if A0_7 == "" then
          _UPVALUE1_ = _UPVALUE1_ - 1
          A0_7 = _UPVALUE0_
        elseif A0_7 then
          if _UPVALUE1_ == _UPVALUE4_ then
            return A0_7
          else
            _UPVALUE1_ = _UPVALUE1_ + 1
          end
        else
          _UPVALUE5_.error("filter returned inappropriate nil")
        end
      end
    end
  end
end
function source.empty()
  local L0_8, L1_9
  L0_8 = _UPVALUE0_
  return L0_8
end
function source.error(A0_10)
  local L1_11
  function L1_11()
    local L0_12, L1_13
    L1_13 = _UPVALUE0_
    return L0_12, L1_13
  end
  return L1_11
end
function source.file(A0_14, A1_15)
  if A0_14 then
    return function()
      if not _UPVALUE0_:read(BLOCKSIZE) then
        _UPVALUE0_:close()
      end
      return (_UPVALUE0_:read(BLOCKSIZE))
    end
  else
    return source.error(A1_15 or "unable to open file")
  end
end
function source.simplify(A0_16)
  _UPVALUE0_.assert(A0_16)
  return function()
    local L0_17, L1_18
    L0_17 = _UPVALUE0_
    L1_18 = L0_17()
    _UPVALUE0_ = L1_18 or _UPVALUE0_
    if not L0_17 then
      return nil, L1_18
    else
      return L0_17
    end
  end
end
function source.string(A0_19)
  if A0_19 then
    return function()
      _UPVALUE2_ = _UPVALUE2_ + BLOCKSIZE
      if _UPVALUE0_.sub(_UPVALUE1_, _UPVALUE2_, _UPVALUE2_ + BLOCKSIZE - 1) ~= "" then
        return (_UPVALUE0_.sub(_UPVALUE1_, _UPVALUE2_, _UPVALUE2_ + BLOCKSIZE - 1))
      else
        return nil
      end
    end
  else
    return source.empty()
  end
end
function source.rewind(A0_20)
  _UPVALUE0_.assert(A0_20)
  return function(A0_21)
    if not A0_21 then
      A0_21 = _UPVALUE0_.remove(_UPVALUE1_)
      if not A0_21 then
        return _UPVALUE2_()
      else
        return A0_21
      end
    else
      _UPVALUE1_[#_UPVALUE1_ + 1] = A0_21
    end
  end
end
function source.chain(A0_22, A1_23)
  _UPVALUE0_.assert(A0_22 and A1_23)
  return function()
    if not _UPVALUE0_ then
      _UPVALUE1_.error("source is empty!", 2)
    end
    while true do
      if _UPVALUE2_ == "feeding" then
        _UPVALUE3_, _UPVALUE4_ = _UPVALUE5_()
        if _UPVALUE4_ then
          return nil, _UPVALUE4_
        end
        _UPVALUE0_ = _UPVALUE6_(_UPVALUE3_)
        if not _UPVALUE0_ then
          if _UPVALUE3_ then
            _UPVALUE1_.error("filter returned inappropriate nil")
          else
            return nil
          end
        elseif _UPVALUE0_ ~= "" then
          _UPVALUE2_ = "eating"
          if _UPVALUE3_ then
            _UPVALUE3_ = ""
          end
          return _UPVALUE0_
        end
      else
        _UPVALUE0_ = _UPVALUE6_(_UPVALUE3_)
        if _UPVALUE0_ == "" then
          if _UPVALUE3_ == "" then
            _UPVALUE2_ = "feeding"
          else
            _UPVALUE1_.error("filter returned \"\"")
          end
        elseif not _UPVALUE0_ then
          if _UPVALUE3_ then
            _UPVALUE1_.error("filter returned inappropriate nil")
          else
            return nil
          end
        else
          return _UPVALUE0_
        end
      end
    end
  end
end
function source.cat(...)
  return function()
    local L0_25, L1_26
    while true do
      L0_25 = _UPVALUE0_
      if L0_25 then
        L0_25 = _UPVALUE0_
        L1_26 = L0_25()
        if L0_25 then
          return L0_25
        end
        if L1_26 then
          return nil, L1_26
        end
        _UPVALUE0_ = _UPVALUE1_.remove(_UPVALUE2_, 1)
      end
    end
  end
end
function sink.table(A0_27)
  local L1_28, L2_29, L3_30
  if not A0_27 then
    L1_28 = {}
    A0_27 = L1_28
  end
  function L1_28(A0_31, A1_32)
    local L3_33
    if A0_31 then
      L3_33 = _UPVALUE0_
      L3_33[#_UPVALUE0_ + 1] = A0_31
    end
    L3_33 = 1
    return L3_33
  end
  L2_29 = L1_28
  L3_30 = A0_27
  return L2_29, L3_30
end
function sink.simplify(A0_34)
  _UPVALUE0_.assert(A0_34)
  return function(A0_35, A1_36)
    local L2_37, L3_38
    L2_37 = _UPVALUE0_
    L3_38 = A0_35
    L3_38 = L2_37(L3_38, A1_36)
    if not L2_37 then
      return nil, L3_38
    end
    _UPVALUE0_ = L3_38 or _UPVALUE0_
    return 1
  end
end
function sink.file(A0_39, A1_40)
  if A0_39 then
    return function(A0_41, A1_42)
      if not A0_41 then
        _UPVALUE0_:close()
        return 1
      else
        return _UPVALUE0_:write(A0_41)
      end
    end
  else
    return sink.error(A1_40 or "unable to open file")
  end
end
function sink.null()
  local L0_43, L1_44
  L0_43 = _UPVALUE0_
  return L0_43
end
function sink.error(A0_45)
  local L1_46
  function L1_46()
    local L0_47, L1_48
    L1_48 = _UPVALUE0_
    return L0_47, L1_48
  end
  return L1_46
end
function sink.chain(A0_49, A1_50)
  _UPVALUE0_.assert(A0_49 and A1_50)
  return function(A0_51, A1_52)
    local L2_53, L3_54, L4_55, L5_56
    if A0_51 ~= "" then
      L2_53 = _UPVALUE0_
      L3_54 = A0_51
      L2_53 = L2_53(L3_54)
      L3_54 = A0_51 and ""
      while true do
        L4_55 = _UPVALUE1_
        L5_56 = L2_53
        L5_56 = L4_55(L5_56, A1_52)
        if not L4_55 then
          return nil, L5_56
        end
        if L2_53 == L3_54 then
          return 1
        end
        L2_53 = _UPVALUE0_(L3_54)
      end
    else
      L2_53 = 1
      return L2_53
    end
  end
end
function pump.step(A0_57, A1_58)
  local L2_59, L3_60, L4_61, L5_62
  L2_59 = A0_57
  L3_60 = L2_59()
  L4_61 = A1_58
  L5_62 = L2_59
  L5_62 = L4_61(L5_62, L3_60)
  if L2_59 and L4_61 then
    return 1
  else
    return nil, L3_60 or L5_62
  end
end
function pump.all(A0_63, A1_64, A2_65)
  local L3_66, L4_67
  L3_66 = _UPVALUE0_
  L3_66 = L3_66.assert
  L4_67 = A0_63 and A1_64
  L3_66(L4_67)
  if not A2_65 then
    L3_66 = pump
    A2_65 = L3_66.step
  end
  while true do
    L3_66 = A2_65
    L4_67 = A0_63
    L4_67 = L3_66(L4_67, A1_64)
    if not L3_66 then
      if L4_67 then
        return nil, L4_67
      else
        return 1
      end
    end
  end
end
